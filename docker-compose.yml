version: '3.9'

services:
  # PostgreSQL Database
  db:
    image: postgres:15
    container_name: tfd_db
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: tfdadmin
      POSTGRES_PASSWORD: securepassword123
      POSTGRES_DB: tfdmanpower
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./backend/init-scripts:/docker-entrypoint-initdb.d
    networks:
      - tfdnet
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U tfdadmin -d tfdmanpower"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API Service
  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    container_name: tfd_backend
    restart: unless-stopped
    ports:
      - "4000:4000"
    environment:
      NODE_ENV: production
      PORT: 4000
      DATABASE_URL: postgres://tfdadmin:securepassword123@db:5432/tfdmanpower
      JWT_SECRET: your_super_secret_jwt_key_here_change_in_production
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - ./backend:/app
      - /app/node_modules
      - /app/generated
    networks:
      - tfdnet
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend React Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: tfd_frontend
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      REACT_APP_API_URL: http://localhost:4000
    depends_on:
      - backend
    volumes:
      - ./frontend:/app
      - /app/node_modules
    networks:
      - tfdnet

  # Nginx Reverse Proxy (for production)
  nginx:
    image: nginx:alpine
    container_name: tfd_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
    networks:
      - tfdnet

volumes:
  pgdata:
    driver: local

networks:
  tfdnet:
    driver: bridge